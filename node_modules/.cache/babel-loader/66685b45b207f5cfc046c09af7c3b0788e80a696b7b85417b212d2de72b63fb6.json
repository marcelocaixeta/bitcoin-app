{"ast":null,"code":"import axios from 'axios';\nimport { format, formatDuration, intervalToDuration, addDays } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nexport default async function getServiceFearAndGreed(limit) {\n  const formatTimeUntilUpdate = seconds => {\n    const duration = intervalToDuration({\n      start: 0,\n      end: seconds * 1000\n    });\n    return formatDuration(duration, {\n      format: ['hours', 'minutes'],\n      locale: ptBR\n    });\n  };\n  try {\n    const response = await axios.get('https://api.alternative.me/fng/?limit=' + limit); // Aguarda a resposta da API\n    const sortedData = response.data.data.sort((a, b) => a.timestamp - b.timestamp);\n    const resultArray = [sortedData.map(item => item.value), sortedData.map(item => {\n      const newDate = addDays(new Date(item.timestamp * 1000), 1);\n      return format(newDate, 'dd/MM');\n    }), sortedData.map(item => item.value_classification), sortedData.map(item => item.time_until_update ? formatTimeUntilUpdate(item.time_until_update) : 'N/A')];\n    return resultArray;\n  } catch (error) {\n    console.error('Erro ao buscar os dados:', error);\n    return [[], [], []];\n  }\n}","map":{"version":3,"names":["axios","format","formatDuration","intervalToDuration","addDays","ptBR","getServiceFearAndGreed","limit","formatTimeUntilUpdate","seconds","duration","start","end","locale","response","get","sortedData","data","sort","a","b","timestamp","resultArray","map","item","value","newDate","Date","value_classification","time_until_update","error","console"],"sources":["/home/marcelocaixeta/Dev/Trade/bitcoin-app/src/ServiceFearAndGreed.js"],"sourcesContent":["import axios from 'axios';\nimport { format, formatDuration, intervalToDuration, addDays} from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\nexport default async function getServiceFearAndGreed(limit) {\n\n  const formatTimeUntilUpdate = (seconds) => {\n    const duration = intervalToDuration({ start: 0, end: seconds * 1000 });\n    return formatDuration(duration, {\n        format: ['hours', 'minutes'],\n        locale: ptBR\n    });\n  };\n\n  try {\n    const response = await axios.get('https://api.alternative.me/fng/?limit=' + limit); // Aguarda a resposta da API\n    const sortedData = response.data.data.sort((a, b) => a.timestamp - b.timestamp);\n    const resultArray = [\n      sortedData.map(item => item.value),\n      sortedData.map(item => {\n        const newDate = addDays(new Date(item.timestamp * 1000), 1);\n        return format(newDate, 'dd/MM');\n      }),\n      sortedData.map(item => item.value_classification),\n      sortedData.map(item => item.time_until_update ? formatTimeUntilUpdate(item.time_until_update) : 'N/A')\n    ];\n    return resultArray;\n  } catch (error) {\n    console.error('Erro ao buscar os dados:', error);\n    return [[], [], []];\n  }\n} \n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,OAAO,QAAO,UAAU;AAC7E,SAASC,IAAI,QAAQ,iBAAiB;AAEtC,eAAe,eAAeC,sBAAsBA,CAACC,KAAK,EAAE;EAE1D,MAAMC,qBAAqB,GAAIC,OAAO,IAAK;IACzC,MAAMC,QAAQ,GAAGP,kBAAkB,CAAC;MAAEQ,KAAK,EAAE,CAAC;MAAEC,GAAG,EAAEH,OAAO,GAAG;IAAK,CAAC,CAAC;IACtE,OAAOP,cAAc,CAACQ,QAAQ,EAAE;MAC5BT,MAAM,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;MAC5BY,MAAM,EAAER;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,wCAAwC,GAAGR,KAAK,CAAC,CAAC,CAAC;IACpF,MAAMS,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,SAAS,GAAGD,CAAC,CAACC,SAAS,CAAC;IAC/E,MAAMC,WAAW,GAAG,CAClBN,UAAU,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC,EAClCT,UAAU,CAACO,GAAG,CAACC,IAAI,IAAI;MACrB,MAAME,OAAO,GAAGtB,OAAO,CAAC,IAAIuB,IAAI,CAACH,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;MAC3D,OAAOpB,MAAM,CAACyB,OAAO,EAAE,OAAO,CAAC;IACjC,CAAC,CAAC,EACFV,UAAU,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,oBAAoB,CAAC,EACjDZ,UAAU,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACK,iBAAiB,GAAGrB,qBAAqB,CAACgB,IAAI,CAACK,iBAAiB,CAAC,GAAG,KAAK,CAAC,CACvG;IACD,OAAOP,WAAW;EACpB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACrB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}